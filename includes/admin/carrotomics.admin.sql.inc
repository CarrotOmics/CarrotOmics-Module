<?php
/**
 * Custom functions for the CarrotOmics site
 *
 * @param $form
 * @param $form_state
 *
 * @ingroup carrotomics_admin
 */
function carrotomics_admin_sql_form($form, &$form_state) {

  // Set the breadcrumb
  $breadcrumb = [];
  $breadcrumb[] = l('Home', '<front>');
  $breadcrumb[] = l('Administration', 'admin');
  $breadcrumb[] = l('CarrotOmics', 'admin/carrotomics/sql');
  drupal_set_breadcrumb($breadcrumb);

  global $user;  // used for output file location

  // Create the form
  $form = [];

  // Add a 'Clean MD5 Checksums' button
  $form['clean_md5_btn'] = [
    '#type'   => 'submit',
    '#name'   => 'clean_md5_btn',
    '#value'  => 'Clean MD5 Checksums',
    '#prefix' => '<div style="padding-top:30px;"><em>'
                 . "Remove MD5 checksums of null strings from the feature table, these"
                 . " have the value </em>d41d8cd98f00b204e9800998ecf8427e<em>"
                 . "</em></div><br />",
    '#suffix' => "<hr>",
  ];

  // Add a 'Clean Null taxids' button
  $form['clean_taxid_btn'] = [
    '#type'   => 'submit',
    '#name'   => 'clean_taxid_btn',
    '#value'  => 'Clean Null taxids',
    '#prefix' => '<div style="padding-top:30px;"><em>'
                 . "Remove the placeholder NULL entries for GRIN or NCBI"
                 . " taxid values generated by the chado bulk loader"
                 . "</em></div><br />",
    '#suffix' => "<hr>",
  ];

  // Add a 'Populate feature residues Length and Checksum' button
  $form['residues_btn'] = [
    '#type'   => 'submit',
    '#name'   => 'residues_btn',
    '#value'  => 'Populate feature residues Length and Checksum',
    '#prefix' => '<div style="padding-top:30px;"><em>'
                 . "In the chado.feature table, any record with content in the"
                 . " residues column will have the seqlen and md5checksum columns"
                 . " populated with appropriate values if they are missing."
                 . "</em></div><br />",
    '#suffix' => "<hr>",
  ];

  // Add a 'GBS Marker Genome Locations' button
  $marker_loc_filename = 'public://mcl/user/'.$user->name.'/marker_loc.tsv';
  $marker_loc_url = file_create_url($marker_loc_filename);
  $form['gbs_loc_btn'] = [
    '#type'   => 'submit',
    '#name'   => 'gbs_loc_btn',
    '#value'  => 'GBS Marker Locations',
    '#prefix' => '<div style="padding-top:30px;"><em>'
                 . "For all GBS markers that do not have a genome location,"
                 . " generate a Mainlab Chado Loader data matrix to use for the"
                 . " marker_loc sheet, generated from all GBS markers that use the"
                 . " naming scheme </em>MK012345 1_2345678<em>"
                 . "</em></div><br />",
    '#suffix' => "<div>Download the generated list from <a href=\"".$marker_loc_url."\">here</a></div><br />"
                 . "<hr>",
  ];

  // Add a 'Generate QTL Abbreviations' button
  $form['qtl_abbrev_btn'] = [
    '#type'   => 'submit',
    '#name'   => 'qtl_abbrev_btn',
    '#value'  => 'Generate QTL Abbreviations',
    '#prefix' => '<div style="padding-top:30px;"><em>'
                 . "Generate featureprop entries with MAIN::published_symbol cvterm"
                 . " for all QTL lacking them, if they are of the format </em>MK012345 anytext<em>"
                 . "</em></div><br />",
    '#suffix' => "<hr>",
  ];

  // Add a 'Generate 'Update stock_featuremap Table' button
  $stock_featuremap_filename = 'public://mcl/user/'.$user->name.'/stock_featuremap.tsv';
  $stock_featuremap_url = file_create_url($stock_featuremap_filename);
  $form['stk_fmp_btn'] = [
    '#type'   => 'submit',
    '#name'   => 'stk_fmp_btn',
    '#value'  => 'Update stock_featuremap Table',
    '#prefix' => '<div style="padding-top:30px;"><em>'
                 . "Use publication links to populate the </em>chado.stock_featuremap<em>"
                 . " table. A publication may link to both a featuremap, as well as to one"
                 . " or more stocks, which can be a population or parents of that population."
                 . " The generated list must be manually curated before loading, because a publication"
                 . " can link to more than one map, or a map may be referenced by multiple publications,"
                 . " so extraneous items must be removed from the list."
                 . "</em></div><br />",
    '#suffix' => "<div>Download the generated list from <a href=\"".$stock_featuremap_url."\">here</a></div><br />"
                 . "<hr>",
  ];

  return $form;
}

/**
 * Validates the form.
 *
 * @param $form
 * @param $form_state
 */
function carrotomics_admin_sql_form_validate($form, &$form_state) {
  // currently only buttons, so no validation is needed
}

/**
 * Submits the form.
 *
 * @param $form
 * @param $form_state
 */
function carrotomics_admin_sql_form_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;

  // Gets the trigger element, i.e. which button was pressed
  $triggering_element = $form_state['triggering_element']['#name'];

  // Take action depending on which button was pressed
  if ($triggering_element == 'clean_md5_btn') {
    [$nerrors, $status] = carrotomics_admin_remove_useless_checksums();
  }
  else if ($triggering_element == 'clean_taxid_btn') {
    [$nerrors, $status] = carrotomics_admin_clean_taxid();
  }
  else if ($triggering_element == 'residues_btn') {
    [$nerrors, $status] = carrotomics_admin_residues_length_checksum();
  }
  else if ($triggering_element == 'gbs_loc_btn') {
    [$nerrors, $status] = carrotomics_admin_gbs_location();
  }
  else if ($triggering_element == 'qtl_abbrev_btn') {
    [$nerrors, $status] = carrotomics_admin_qtl_abbrev();
  }
  else if ($triggering_element == 'stk_fmp_btn') {
    [$nerrors, $status] = carrotomics_admin_populate_stock_featuremap();
  }
  else {
    [$nerrors, $status] = [1, "Unknown button \"$triggering_element\" was pressed"];
  }
  drupal_set_message($status, $nerrors?'error':'status');
}


/**
 * Looks up a cvterm_id from a cv and cvterm
 * Returns an array. First value is 1 if error, 0 if success.
 * Second value is error message if error, cvterm_id if success.
 *
 * @param $cv_name
 * @param $cvterm_name
 *
 */
function carrotomics_admin_lookup_cvterm_id($cv_name, $cvterm_name) {
  $sql = "SELECT cvterm_id FROM {cvterm} WHERE name = :cvterm_name AND cv_id=(SELECT cv_id FROM {cv} WHERE name = :cv_name)";
  $args = [':cv_name' => $cv_name, ':cvterm_name' => $cvterm_name];
  $typeresults = chado_query($sql, $args);
  $obj = $typeresults->fetchObject();
  if ($obj) {
    return [0, $obj->cvterm_id];
  }
  else {
    return [1, t('Error retrieving cvterm_id for "@cvterm_name" from cv "@cv_name"',
                 ['@cvterm_name' => $cvterm_name, '@cv_name' => $cv_name])];
  }
}

/**
 * Many features get an md5 checksum generated for a null string.
 * These are not useful. This function will remove them.
 */
function carrotomics_admin_remove_useless_checksums() {
  // equivalent SQL: UPDATE chado.feature SET md5checksum = NULL WHERE md5checksum = 'd41d8cd98f00b204e9800998ecf8427e';

  $where = [ 'md5checksum' => 'd41d8cd98f00b204e9800998ecf8427e' ];
  $newvalues = [ 'md5checksum' => NULL ];

  // First get number of matching records that we will update, since
  // chado_update_record only returns true or false
  $resultarray = chado_select_record('feature', [], $where);
  $nchanged = sizeof($resultarray);

  // Now make the changes
  try {
    $success = chado_update_record('feature', $where, $newvalues);
  } catch (Exception $e) {
    return [1, $e->getMessage()];
  }
  if ($success) {
    return [0, "$nchanged records updated"];
  }
  else {
    return [1, "$nchanged records to update, but something unexpected went wrong"];
  }
}

/**
 * Many features get an md5 checksum generated for a null string.
 * These are not useful. This function will remove them.
 */
function carrotomics_admin_clean_taxid() {
  // I have hardcoded the dbxref values for the placeholder records

  // First get number of matching records that we will update
  $sql = "SELECT COUNT(*) FROM {organism_dbxref} WHERE dbxref_id in (3843, 3910)";
  $args = [];
  $count = chado_query($sql, $args)->fetchField();

  if ($count) {
    $sql = "DELETE FROM {organism_dbxref} WHERE dbxref_id in (3843, 3910)";
    $args = [];
    $result = chado_query($sql, $args);
  }

  if ($count) {
    return [0, "$count placeholder records removed"];
  }
  else {
    return [0, "There were no placeholder records to remove"];
  }
}

/**
 * When a feature has a value in the residues column, the
 * associated seqlen and md5checksum values should also be present.
 * When this is not the case, this function fills in those values.
 */
function carrotomics_admin_residues_length_checksum() {
  $errors = '';
  $nerrors = 0;
  $nupdated = 0;

  // Retrieve a list of chado.feature records missing length or checksum.
  // There are both empty strings and NULL values in both residues and md5checksum
  $sql = "SELECT feature_id, residues FROM {feature}"
       . " WHERE (residues = '') IS FALSE"  // i.e. not NULL and not empty string
       . " AND ((seqlen = 0) IS NOT FALSE"  // i.e. either NULL or zero
       . " OR (md5checksum = '') IS NOT FALSE)";  // i.e. either NULL or empty string
  $args = [];
  try {
    $results = chado_query($sql, $args);
  } catch (Exception $e) {
    return [1, $e->getMessage()];
  }

  // Validate the residue column before proceeding.
  // Errors will have to be dealt with manually
  while ($obj = $results->fetchObject()) {
    $feature_id = $obj->feature_id;
    $residues = $obj->residues;
    if (preg_match('/([^ABCDEFGHIKLMNPQRSTVWXYZabcdefghiklmnpqrstvwxyz\*])/', $residues, $matches)) {
      $errors .= '<br>Invalid residue "'.$matches[1].'" in feature '.$feature_id;
      $nerrors++;
    }
    else {
      $nupdated++;
    }
  }

  // If no errors, proceed with the update
  if ( (!$nerrors) and ($nupdated) ) {
    $sql = "UPDATE {feature}"
         . " SET seqlen=CHAR_LENGTH(residues), md5checksum=MD5(residues)"
         . " WHERE (residues = '') IS FALSE"
         . " AND ((seqlen = 0) IS NOT FALSE"
         . " OR (md5checksum = '') IS NOT FALSE)";
    $args = [];
    try {
      $results = chado_query($sql, $args);
    } catch (Exception $e) {
      return [1, $e->getMessage()];
    }
  }
  else {
    $nupdated = 0;
  }
  $status = t('Updated @nupdated features, @nerrors errors',
              ['@nupdated' => $nupdated, '@nerrors' => $nerrors]);
  return [$nerrors, $status . $errors];
}

/**
 * Generate genome locations for GBS markers in the chado.featureloc table
 *
 */
function carrotomics_admin_gbs_location() {
  // It is hard to be sure which genome to use, so this function will just create
  // a table, that can then be used to create a MCL file. Populate with
  // default values for DCARv2 genome.
  $genome = 'Carrot Genome Assembly DCARv2';  // default value for the "*genome" column
  $genus = 'Daucus';
  $species = 'carota';
  $infraspecific_type = 'subspecies';
  $infraspecific_name = 'sativus';

  $headers = [ '*genome', '*chromosome', '*marker_name',
               'genus', 'species', 'infraspecific_type', 'infraspecific_name',
               'fmin', 'fmax', 'strand' ];

  $sql = "SELECT F.feature_id, F.name FROM {feature} F LEFT JOIN {featureloc} L"
       . " ON F.feature_id=L.feature_id WHERE F.name ~ '^MK\d+ \d_\d+$' AND L.featureloc_id IS NULL"
       . " AND F.type_id=(SELECT cvterm_id FROM cvterm C WHERE C.name='genetic_marker'"
       . " AND C.cv_id=(SELECT cv_id FROM cv WHERE name='sequence'))"
       . " ORDER BY F.name";
  $args = [];
  try {
    $results = chado_query($sql, $args);
  } catch (Exception $e) {
    return [1, $e->getMessage()];
  }

  // initialize the output file conent
  $content = implode("\t", $headers) . "\n";
  $nfound = 0;

  while ($obj = $results->fetchObject()) {
    $nfound++;
    $name = $obj->name;
    // extract chromosome number and position. strand is left blank
    preg_match('/(\d+)_(\d+)$/', $name, $matches);
    $chromosome = 'DCARv2_Chr' . $matches[1];
    $fmax = $matches[2];
    $fmin = $fmax - 1;
    $strand = '';
    $cols = [ $genome, $chromosome, $name,
              $genus, $species, $infraspecific_type, $infraspecific_name,
              $fmin, $fmax, $strand ];
    $content .= implode("\t", $cols) . "\n";
  }

  // save file in mcl directory. Save even if nothing retrieved, to overwrite old versions
  global $user;
  $marker_loc_filename = 'public://mcl/user/'.$user->name.'/marker_loc.tsv';
  file_put_contents($marker_loc_filename, $content);

  if ( $nfound ) {
    return [0, "$nfound markers found, download them from the link below the button"];
  }
  else {
    return [0, "There were no markers found without genome locations"];
  }
}

/**
 * Generate featureprop entries with MAIN::published_symbol cvterm
 * for all QTL lacking them, if they are of the format MK012345 anytext</div>
 *
 */
function carrotomics_admin_qtl_abbrev() {
  $errors = '';

  // get cvterm_id for QTL
  [$error, $qtl_type_id] = carrotomics_admin_lookup_cvterm_id('sequence', 'QTL');
  if ($error ){ return[$error, $qtl_type_id]; }

  // get cvterm_id to use for featureprop table from MAIN::published_symbol
  [$error, $symbol_type_id] = carrotomics_admin_lookup_cvterm_id('MAIN', 'published_symbol');
  if ($error ){ return[$error, $symbol_type_id]; }

  // retrieve an array of all QTL lacking the published_symbol property
  // the query retrieves all QTL featureprop, and in the loop flag those
  // that already have a published_symbol
  $sql = "SELECT DISTINCT F.feature_id, F.name, F.uniquename, FP.type_id FROM {feature} F"
       . " LEFT JOIN {featureprop} FP ON F.feature_id=FP.feature_id"
       . " WHERE F.type_id=:qtl_type_id";
  $args = [':qtl_type_id' => $qtl_type_id];
  try {
    $results = chado_query($sql, $args);
  } catch (Exception $e) {
    return [1, $e->getMessage()];
  }
  $qtls = [];
  // we will often iterate the same feature_id multiple times due to multiple featureprop records
  while ($obj = $results->fetchObject()) {
    $qtls[$obj->feature_id]['name'] = $obj->uniquename;
    if ($obj->type_id == $symbol_type_id) {
      $qtls[$obj->feature_id]['exclude'] = 1;
    }
  }

  // loop to add missing published_symbol entries to the featureprop table
  $rank = 0;  // all added lines will have this rank value. Since they are new, there is no possibility of conflict
  $nadded = 0;
  $nskipped = 0;
  $nerrors = 0;
  foreach($qtls as $feature_id => $record) {
    $uniquename = $record['name'];
    $exclude = array_key_exists('exclude', $record);  // defined only when excluded
    // skip if excluded because it already has a published_symbol
    if (!$exclude) {
      // Derive name by removing the 'MK012345 ' portion. If that's missing, skip it
      if ( preg_match('/^MK\d{6} (.*)/', $uniquename, $matches) ) {
        $published_symbol = $matches[1];
        if ($published_symbol) {
          $values = [ 'feature_id' => $feature_id,
                      'type_id' => $symbol_type_id,
                      'value' => $published_symbol,
                      'rank' => $rank ];
          try {
            $result = chado_insert_record('featureprop', $values);
            if ($result) {
              $nadded++;
            }
            else {
              $nerrors++;
            }
          } catch (Exception $e) {
            $nerrors++;
            $errors .= '<br />' . $e->getMessage();
          }
        }
        else {
          $errors .= "Unparseable name \"$uniquename\"<br>";
          $nerrors++;
        }
      }
      else {
        $nskipped++;
      }
    }
  }

  $status = t('Added @nadded published_names, @nskipped skipped, @nerrors errors',
              ['@nadded' => $nadded, '@nskipped' => $nskipped, '@nerrors' => $nerrors]);
  return [$nerrors, $status . $errors];
}

/**
 * Generate a file to populate the chado.stock_featuremap table using publications to find the links.
 *
 */
function carrotomics_admin_populate_stock_featuremap() {
  // The first three columns are for the chado bulk loader. The other columns are
  // information for the manual filtering process
  $headers = ['featuremap_id', 'stock_id', 'type_id',
              '(stock type)', '(pub_id)', '(map name)', '(stock name)', '(stock uniquename)'];

  $sql = ' SELECT F.featuremap_id, F.name AS mapname, FP.pub_id, S.name AS stockname, S.uniquename, SP.stock_id, S.type_id, CV.name AS stocktype'
       . ' FROM {featuremap} F'
       . ' LEFT JOIN {featuremap_pub} FP ON F.featuremap_id=FP.featuremap_id'  // find publication(s) referencing this map
       . ' LEFT JOIN {stock_pub} SP ON FP.pub_id=SP.pub_id'  // find stocks the publication refers to
       . ' LEFT JOIN {stock} S ON SP.stock_id=S.stock_id'  // used to get type_id of stock
       . ' LEFT JOIN {cvterm} CV ON S.type_id=CV.cvterm_id'  // used to get name of type of stock
       . ' LEFT JOIN {stock_featuremap} SF ON SP.stock_id=SF.stock_id'  // used to find if already present in stock_featuremap
       . ' WHERE SP.pub_ID IS NOT NULL'  // eliminates when publication does not refer to any stock
       . ' AND SF.featuremap_id IS NULL'  // if not null it is already in stock_featuremap table, can skip
       . ' ORDER BY F.featuremap_id, SP.stock_id';
  $args = [];

  try {
    $results = chado_query($sql, $args);
  } catch (Exception $e) {
    return[1, $e->getMessage()];
  }

  // initialize the output file conent
  $content = implode("\t", $headers) . "\n";
  $nfound = 0;
  $seen = [];  // I can't easily DISTINCT with so many columns, remove duplicates in the loop

  while ($obj = $results->fetchObject()) {
    $key = $obj->featuremap_id . ':' . $obj->stock_id . ':' . $obj->type_id;
    if (!array_key_exists($key, $seen)) {
      $cols = [ $obj->featuremap_id,
                $obj->stock_id,
                $obj->type_id,
                $obj->stocktype,
                $obj->pub_id,
                $obj->mapname,
                $obj->stockname,
                $obj->uniquename,
              ];
      $content .= implode("\t", $cols) . "\n";
      $nfound++;
      $seen[$key] = 1;
    }
  }

  // save file in mcl directory. Save even if nothing retrieved, to overwrite old versions
  global $user;
  $marker_loc_filename = 'public://mcl/user/'.$user->name.'/stock_featuremap.tsv';
  file_put_contents($marker_loc_filename, $content);

  if ( $nfound ) {
    return [0, "$nfound possible map to stock references found, download them from the link below the button"];
  }
  else {
    return [0, "There were no map to stock references found"];
  }
}
